{
	"info": {
		"_postman_id": "f2c5b23c-1f57-4f0a-9402-520646560ce2",
		"name": "YouToddler Test",
		"description": "## Introduction\n\nYouToddler is an open-source YouTube downloader API passion project by 4 collage students from UniDeb.\n\nThe API is defined with [Swagger](https://editor.swagger.io), and it's definition are always available, by calling {{host_url}}/{{api_url}}/api-docs (the Get Swagger Documentation call) in your browser any time.\n\n## About the API\n\nIt is a REST API, so keeping the standard principles are always desired. Meaning It MUST HAVE Uniform interface, MUST HAVE Client-server decoupling, MUST BE Stateless, SHOULD HAVE Cacheability, MUST BE prepared for Layered system architecture, and COULD support code on demand. More infromation [here](https://www.ibm.com/topics/rest-apis).\n\n## Data models\n\n### Metadata Object\n\n``` json\n{\n  \"url\": \"https://youtu.be/dQw4w9WgXcQ\",\n  \"videoName\": \"Example Name gone wrong! | !!!NOT CLICKBAIT!!!\",\n  \"imageUrl\": \"https://i.ytimg.com/vi/dQw4w9WgXcQ/hq720.jpg\",\n  \"formats\": [\n    { ... format_1 ... },\n    { ... format_2 ... } ...\n  ]\n}\n\n```\n\n### Format object\n\n[Link to original definition.](https://manhatten.atlassian.net/wiki/spaces/AT/pages/4161559/Video+audio+formats#JSON)\n\n``` json\n{\n  \"id\": 22,\n  \"name\": \"mp4\",\n  \"resolution\": { ... resolution data ... }\n}\n\n```\n\n### Resolution Object\n\n``` json\n\"resolution\": {\n  \"video\": { ... Videoresolution ... },\n  \"audio\": { ... Audio resolution ... },\n  \"filesize\": 8497,\n  \"tbr\": 446000\n}\n\n```\n\n### Video Resolution Object\n\n``` json\n\"video\": {\n  \"videoCodec\": \"avc1\",\n  \"fps\": 30,\n  \"vbr\": 446000\n}\n\n```\n\n### Audio Resolution Object\n\n``` json\n\"audio\": {\n  \"audioCodec\": \"mp4a\",\n  \"abr\": 0\n}\n\n```\n\n### ApiResponse Object\n\n``` javascript\n{\n    \"code\": 200,\n    \"type\": \"base64\",\n    \"message\":  \"UEsDBBQAAAAAADZchVYAAAAAAAAAAAAAAAAHAAAAVmlkZWpvL1BLA\n                 wQUAAAACAAxXIVWH6qfaPtdOwCe1zsARAAAAFZpZGVqby9yYXBpZH\n                 NhdmUuY29tX2V6X2F6X3J1bHRfa3VyYWZpX21lZ2NzaW5hbHRhLWV...\n}\n\n```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "11115367-f2c5b23c-1f57-4f0a-9402-520646560ce2"
	},
	"item": [
		{
			"name": "Get Swagger Documentation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f87ae4f3-b2ba-4e82-8d70-441b70214174",
						"exec": [
							"// Succesfull response test\r",
							"pm.test(\"Response was successfull.\", function(){\r",
							"    test = eval(pm.environment.get(\"StatusCodeWithBodyTest\"));\r",
							"    test(200);\r",
							"});\r",
							"\r",
							"// OpenAPI verson test\r",
							"pm.test(\"OpenAPI version is correct.\", function(){\r",
							"    test = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    test(\"openapi\", \"string\", \"3.0.3\");\r",
							"});\r",
							"\r",
							"// Title test\r",
							"pm.test(\"Info and title exists and contains YouToddler.\", function(){\r",
							"    test = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    test(\"info.title\", \"string\", \"YouToddler\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "03d1b9d5-bb91-4c08-8c6e-858fa65e6a55",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_url}}/{{api_url}}/api-docs",
					"host": [
						"{{host_url}}"
					],
					"path": [
						"{{api_url}}",
						"api-docs"
					]
				},
				"description": "This returns the Swagger definition documentation of the currently run API."
			},
			"response": []
		},
		{
			"name": "Meta Ok Test A",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a8b58ec-7e4e-4609-b69c-ebf3431c92cd",
						"exec": [
							"pm.test(\"Response is good.\", function(){\r",
							"    test = eval(pm.environment.get(\"BasicOkTest\"));\r",
							"    test();\r",
							"});\r",
							"\r",
							"pm.test(\"Response was successfull.\", function(){\r",
							"    test = eval(pm.environment.get(\"StatusCodeWithBodyTest\"));\r",
							"    test(200);\r",
							"});\r",
							"\r",
							"pm.test(\"URL is correct.\", function(){\r",
							"    ConTest = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    ConTest(\"url\", \"string\", pm.collectionVariables.get(\"test_vid_2\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Video title exists.\", function(){\r",
							"    ExtTest = eval(pm.environment.get(\"JsonBodyExistTest\"));\r",
							"    ExtTest(\"videoName\", \"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Thumbnail URL exists.\", function(){\r",
							"    ExtTest = eval(pm.environment.get(\"JsonBodyExistTest\"));\r",
							"    ExtTest(\"imageUrl\", \"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3ea2216f-506d-4481-b7f4-e7462ead17f1",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {},
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_url}}/{{api_url}}/meta?url={{test_vid_2}}",
					"host": [
						"{{host_url}}"
					],
					"path": [
						"{{api_url}}",
						"meta"
					],
					"query": [
						{
							"key": "url",
							"value": "{{test_vid_2}}"
						}
					]
				},
				"description": "This tests the Metadata request with the {{test_vid_2}} URL.\n\nChecks if the response is without error, and if it has a JSON body."
			},
			"response": []
		},
		{
			"name": "Meta Ok Test B",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60845989-fdb3-48a3-adf7-a5e938b90965",
						"exec": [
							"pm.test(\"Response is good.\", function(){\r",
							"    test = eval(pm.environment.get(\"BasicOkTest\"));\r",
							"    test();\r",
							"});\r",
							"\r",
							"pm.test(\"Response was successfull.\", function(){\r",
							"    test = eval(pm.environment.get(\"StatusCodeWithBodyTest\"));\r",
							"    test(200);\r",
							"});\r",
							"\r",
							"pm.test(\"URL is correct.\", function(){\r",
							"    ConTest = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    ConTest(\"url\", \"string\", pm.collectionVariables.get(\"test_vid_1\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Video title exists.\", function(){\r",
							"    ExtTest = eval(pm.environment.get(\"JsonBodyExistTest\"));\r",
							"    ExtTest(\"videoName\", \"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3f647c19-73cf-42a2-88c7-4b0cd0e14785",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {},
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_url}}/{{api_url}}/meta?url={{test_vid_1}}",
					"host": [
						"{{host_url}}"
					],
					"path": [
						"{{api_url}}",
						"meta"
					],
					"query": [
						{
							"key": "url",
							"value": "{{test_vid_1}}"
						}
					]
				},
				"description": "This tests the Metadata request with the {{test_vid_1}} URL.\n\nChecks if the response is without error, and if it has a JSON body."
			},
			"response": []
		},
		{
			"name": "Meta Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e7601f9-f66f-479b-9341-92073c1bc331",
						"exec": [
							"pm.test(\"Response is an error.\", function(){\r",
							"    test = eval(pm.environment.get(\"BasicErrorTest\"));\r",
							"    test();\r",
							"});\r",
							"\r",
							"pm.test(\"Response code was correct.\", function(){\r",
							"    test = eval(pm.environment.get(\"StatusCodeWithBodyTest\"));\r",
							"    test(400);\r",
							"    ConTest = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    ConTest(\"status\", \"number\", 400);\r",
							"    ConTest(\"error\", \"string\", \"Bad Request\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3b040280-f341-4ee8-bd06-59ed535e6ec4",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {},
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_url}}/{{api_url}}/meta",
					"host": [
						"{{host_url}}"
					],
					"path": [
						"{{api_url}}",
						"meta"
					]
				},
				"description": "This tests the Metadata request without passing an url tag along with the request.\n\nChecks if the response is with the correct, `400: BAD_REQUEST` error, and if it is without a JSON body."
			},
			"response": []
		},
		{
			"name": "Meta Not Acceptable",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb4cb312-0392-43b1-bad4-debef3d99d6a",
						"exec": [
							"pm.test(\"Response is an error.\", function(){\r",
							"    test = eval(pm.environment.get(\"BasicErrorTest\"));\r",
							"    test();\r",
							"});\r",
							"\r",
							"pm.test(\"Response code was correct.\", function(){\r",
							"    test = eval(pm.environment.get(\"StatusCodeNoBodyTest\"));\r",
							"    test(406);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3e453308-25d3-46c2-9248-4e387765e946",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {},
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_url}}/{{api_url}}/meta?url=",
					"host": [
						"{{host_url}}"
					],
					"path": [
						"{{api_url}}",
						"meta"
					],
					"query": [
						{
							"key": "url",
							"value": ""
						}
					]
				},
				"description": "This tests the Metadata request without passing an url tag along with the request.\n\nChecks if the response is with the correct, `406: NOT_ACCEPTABLE` error, and if it is without a JSON body."
			},
			"response": []
		},
		{
			"name": "Download Ok Test A",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f96c12b-05ee-41cd-b69d-026c2dae8391",
						"exec": [
							"pm.test(\"Response is good.\", function(){\r",
							"    test = eval(pm.environment.get(\"BasicOkTest\"));\r",
							"    test();\r",
							"});\r",
							"\r",
							"pm.test(\"Response was successfull.\", function(){\r",
							"    test = eval(pm.environment.get(\"StatusCodeWithBodyTest\"));\r",
							"    test(200);\r",
							"});\r",
							"\r",
							"pm.test(\"JSON response is not an error.\", function(){\r",
							"    ConTest = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    ConTest(\"code\", \"number\", 200);\r",
							"    ConTest(\"type\", \"string\", \"base64\");\r",
							"});\r",
							"\r",
							"pm.test(\"JSON response is base64 encoded.\", function(){\r",
							"    ConTest = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    ExtTest = eval(pm.environment.get(\"JsonBodyExistTest\"));\r",
							"    ConTest(\"type\", \"string\", \"base64\");\r",
							"    ExtTest(\"message\", \"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "edb7ce13-fc46-49f5-b06d-ffc82798cff7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_url}}/{{api_url}}/download?videoID={{test_id_2_av}}&audioID={{test_id_2_av}}&url={{test_vid_2}}",
					"host": [
						"{{host_url}}"
					],
					"path": [
						"{{api_url}}",
						"download"
					],
					"query": [
						{
							"key": "videoID",
							"value": "{{test_id_2_av}}"
						},
						{
							"key": "audioID",
							"value": "{{test_id_2_av}}"
						},
						{
							"key": "url",
							"value": "{{test_vid_2}}"
						}
					]
				},
				"description": "This tests the Metadata request with the {{test_vid_2}} URL, and with the `{{test_id_2_?}}` ids.\n\nThe IDs can end with `_a` or `_v` or with `_av`, depending if it means an audio/video/audio-video-combined id.\n\nChecks if the response is without error, and if the message is encoded in base64."
			},
			"response": []
		},
		{
			"name": "Download Ok Test B",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e14f577-bc76-4fd0-a203-405a6260834b",
						"exec": [
							"pm.test(\"Response is good.\", function(){\r",
							"    test = eval(pm.environment.get(\"BasicOkTest\"));\r",
							"    test();\r",
							"});\r",
							"\r",
							"pm.test(\"Response was successfull.\", function(){\r",
							"    test = eval(pm.environment.get(\"StatusCodeWithBodyTest\"));\r",
							"    test(200);\r",
							"});\r",
							"\r",
							"pm.test(\"JSON response is not an error.\", function(){\r",
							"    ConTest = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    ConTest(\"code\", \"number\", 200);\r",
							"    ConTest(\"type\", \"string\", \"base64\");\r",
							"});\r",
							"\r",
							"pm.test(\"JSON response is base64 encoded.\", function(){\r",
							"    ConTest = eval(pm.environment.get(\"JsonBodyContainTest\"));\r",
							"    ExtTest = eval(pm.environment.get(\"JsonBodyExistTest\"));\r",
							"    ConTest(\"type\", \"string\", \"base64\");\r",
							"    ExtTest(\"message\", \"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "aacb9dc5-c6e9-4f59-b8c9-041acc583e77",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host_url}}/{{api_url}}/download?videoID={{test_id_1_av}}&audioID={{test_id_1_av}}&url={{test_vid_1}}",
					"host": [
						"{{host_url}}"
					],
					"path": [
						"{{api_url}}",
						"download"
					],
					"query": [
						{
							"key": "videoID",
							"value": "{{test_id_1_av}}"
						},
						{
							"key": "audioID",
							"value": "{{test_id_1_av}}"
						},
						{
							"key": "url",
							"value": "{{test_vid_1}}"
						}
					]
				},
				"description": "This tests the Metadata request with the {{test_vid_1}} URL, and with the `{{test_id_1_?}}` ids.\n\nThe IDs can end with `_a` or `_v` or with `_av`, depending if it means an audio/video/audio-video-combined id.\n\nChecks if the response is without error, and if the message is encoded in base64."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c6f9000c-9a1f-4313-aa97-9e09cedd7ea7",
				"type": "text/javascript",
				"exec": [
					"// Functions used for YouToddler Unit tests. Created by TheUsernameIsNotTaken (https://github.com/TheUsernameIsNotTaken)",
					"",
					"/* *************************** *",
					" * ------- JSON FIELDS ------- *",
					" * *************************** */",
					"",
					"// Not used in this version.",
					"",
					"/* *************************** *",
					" * ----- TEST FUNCTIONS ------ *",
					" * *************************** */",
					"",
					"// --- Status code checks",
					"// basic status code and body exist check",
					"let StatusCodeWithBodyTest = (statuscode) => {",
					"    pm.response.to.have.status(statuscode);",
					"    pm.response.to.be.withBody;",
					"    pm.response.to.be.json;",
					"};",
					"pm.environment.set(\"StatusCodeWithBodyTest\", StatusCodeWithBodyTest.toString());",
					"// basic status code without body check",
					"let StatusCodeNoBodyTest = (statuscode) => {",
					"    pm.response.to.have.status(statuscode);",
					"    pm.response.to.not.be.withBody;",
					"};",
					"pm.environment.set(\"StatusCodeNoBodyTest\", StatusCodeNoBodyTest.toString());",
					"",
					"/* *************************** */",
					"",
					"// --- Error and OK checks",
					"// basic error check",
					"let BasicErrorTest = () => {",
					"    pm.response.to.be.error;",
					"};",
					"pm.environment.set(\"BasicErrorTest\", BasicErrorTest.toString());",
					"// besic ok check",
					"let BasicOkTest = () => {",
					"    pm.response.to.be.not.error;",
					"};",
					"pm.environment.set(\"BasicOkTest\", BasicOkTest.toString());",
					"",
					"/* *************************** */",
					"",
					"// --- JSON Body parts checks",
					"// Json body part existence check",
					"let JsonBodyExistTest = (varName, varType) => {",
					"    pm.response.to.have.jsonBody(varName);",
					"    let JsonVar = eval(\"() => {return pm.response.json().\" + varName + \"};\");",
					"    pm.expect(JsonVar()).to.be.a(varType)",
					"    if(varType != \"number\")",
					"        pm.expect(JsonVar()).to.not.be.empty;",
					"    pm.expect(JsonVar()).to.not.be.null;",
					"};",
					"pm.environment.set(\"JsonBodyExistTest\", JsonBodyExistTest.toString());",
					"// Json body part content check",
					"let JsonBodyContainTest = (varName, varType, value) => {",
					"    pm.response.to.have.jsonBody(varName);",
					"    let JsonVar = eval(\"() => {return pm.response.json().\" + varName + \"};\");",
					"    if(varType == \"number\"){",
					"        pm.expect(JsonVar()).to.not.be.null;",
					"        pm.expect(JsonVar()).to.be.equal(value);",
					"    }else{",
					"        pm.expect(JsonVar()).to.not.be.empty;",
					"        pm.expect(JsonVar()).to.contain(value);",
					"    }",
					"};",
					"pm.environment.set(\"JsonBodyContainTest\", JsonBodyContainTest.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f1eef7bc-b897-4a57-b4bf-c8eb4525e9f4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "30b96932-c007-45ea-9d0d-11d9eb2d3968",
			"key": "host_url",
			"value": "http://localhost:9090",
			"type": "string"
		},
		{
			"id": "718c88d8-f6a4-4028-a063-e8fec9bd05fa",
			"key": "api_url",
			"value": "api/v1",
			"type": "string"
		},
		{
			"id": "bcdd9b65-4171-4789-8b0b-96d58439f941",
			"key": "test_vid_1",
			"value": "https://youtu.be/v1BDVbbxqp0",
			"type": "string"
		},
		{
			"id": "67410c3f-8ece-414b-b662-7a7206458269",
			"key": "test_id_1_av",
			"value": "22",
			"type": "string"
		},
		{
			"id": "b158225f-c286-49bc-938e-5986e03d2687",
			"key": "test_vid_2",
			"value": "https://youtu.be/ue_7GwsB8TE",
			"type": "string"
		},
		{
			"id": "37a4f1f8-fb62-4215-9480-2b340e83060b",
			"key": "test_id_2_av",
			"value": "17",
			"type": "string"
		}
	]
}