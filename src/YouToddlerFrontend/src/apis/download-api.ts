/* tslint:disable */
/* eslint-disable */
/**
 * YouToddler - OpenAPI 3.0
 * This is an on-premise download manager for youtube-dlp. It should be based on the OpenAPI 3.0 specification.   _If you're looking for the sprint board, then click [here](https://manhatten.atlassian.net/jira/software/projects/MAN/boards/1)._  Some useful links: - [The YouToddler repository](https://github.com/cant0r/YouToddler) - [The backend API definition for YouToddler](https://manhatten.atlassian.net/wiki/spaces/AT/pages/6094879/YouToddler+Backend) - [The WebAPi definition for YouToddler](https://manhatten.atlassian.net/wiki/spaces/AT/pages/4063276/REST+API+interfaces)
 *
 * OpenAPI spec version: 0.2.1
 * Contact: pixelbetyar@mailbox.unideb.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiResponse } from '../models';
/**
 * DownloadApi - axios parameter creator
 * @export
 */
export const DownloadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This returns a video's video or audio data given by it's url, video id or audio id. it can be video-only, audio-only or both combined.
         * @summary Return video's video or audio data
         * @param {string} url URL of the video to fetch
         * @param {number} [videoID] ID of the video format
         * @param {number} [audioID] ID of the audio format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoData: async (url: string, videoID?: number, audioID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getVideoData.');
            }
            const localVarPath = `/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (videoID !== undefined) {
                localVarQueryParameter['videoID'] = videoID;
            }

            if (audioID !== undefined) {
                localVarQueryParameter['audioID'] = audioID;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadApi - functional programming interface
 * @export
 */
export const DownloadApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This returns a video's video or audio data given by it's url, video id or audio id. it can be video-only, audio-only or both combined.
         * @summary Return video's video or audio data
         * @param {string} url URL of the video to fetch
         * @param {number} [videoID] ID of the video format
         * @param {number} [audioID] ID of the audio format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoData(url: string, videoID?: number, audioID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiResponse>>> {
            const localVarAxiosArgs = await DownloadApiAxiosParamCreator(configuration).getVideoData(url, videoID, audioID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DownloadApi - factory interface
 * @export
 */
export const DownloadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This returns a video's video or audio data given by it's url, video id or audio id. it can be video-only, audio-only or both combined.
         * @summary Return video's video or audio data
         * @param {string} url URL of the video to fetch
         * @param {number} [videoID] ID of the video format
         * @param {number} [audioID] ID of the audio format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoData(url: string, videoID?: number, audioID?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiResponse>> {
            return DownloadApiFp(configuration).getVideoData(url, videoID, audioID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadApi - object-oriented interface
 * @export
 * @class DownloadApi
 * @extends {BaseAPI}
 */
export class DownloadApi extends BaseAPI {
    /**
     * This returns a video's video or audio data given by it's url, video id or audio id. it can be video-only, audio-only or both combined.
     * @summary Return video's video or audio data
     * @param {string} url URL of the video to fetch
     * @param {number} [videoID] ID of the video format
     * @param {number} [audioID] ID of the audio format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadApi
     */
    public async getVideoData(url: string, videoID?: number, audioID?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiResponse>> {
        return DownloadApiFp(this.configuration).getVideoData(url, videoID, audioID, options).then((request) => request(this.axios, this.basePath));
    }
}
